name: CD Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      module:
        description: 'Select module to deploy'
        required: true
        default: 'app'
        type: choice
        options:
          - app
          - admin

jobs:
  deploy-app:
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.module == 'app') || github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build app module
        run: ./gradlew :app:clean :app:build
        env: 
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRATION: ${{ secrets.JWT_ACCESS_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}

      - name: Build app Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}-app:latest ./app

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push app Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}-app:latest

      - name: SSH and pull Docker image on EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEV_AWS_EC2_HOST }}
          username: ${{ secrets.DEV_AWS_EC2_USERNAME }}
          key: ${{ secrets.DEV_AWS_EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/workspace
            rm .env
            touch .env
            echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.PROJECT_NAME }}" >> .env
            echo "MYSQL_USER=admin" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${{ secrets.PROJECT_NAME }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=admin" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "TEST_ENV_VAR=${{ secrets.TEST_ENV_VAR }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "DB_URL=${{ secrets.DB_URL }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }}" >> .env
            echo "JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}" >> .env
            echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker compose down -v
            docker compose up -d

  deploy-admin:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.module == 'admin' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build admin module
        run: ./gradlew :admin:clean :admin:build

      - name: Build admin Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}//${{ secrets.PROJECT_NAME }}-admin:latest ./admin

# TODO: admin api 만들고 설정 다시
#      - name: Log in to Docker Hub
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Push admin Docker image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/admin:latest
#
#      - name: SSH and pull Docker image on EC2
#        uses: appleboy/ssh-action@v0.1.5
#        with:
#          host: ${{ secrets.EC2_ADMIN_HOST }}
#          username: ${{ secrets.EC2_ADMIN_USER }}
#          key: ${{ secrets.EC2_ADMIN_SSH_KEY }}
#          script: |
#            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/admin:latest
#            docker stop admin || true
#            docker rm admin || true
#            docker ps -q --filter "publish=8081" | xargs -r docker rm -f
#            docker run -d --name admin -p 8081:8081 ${{ secrets.DOCKERHUB_USERNAME }}/admin:latest
